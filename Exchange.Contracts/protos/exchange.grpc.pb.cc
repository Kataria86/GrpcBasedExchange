// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange.proto

#include "exchange.pb.h"
#include "exchange.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace exchange {

static const char* ExchangeService_method_names[] = {
  "/exchange.ExchangeService/SendMessage",
  "/exchange.ExchangeService/SendResponse",
  "/exchange.ExchangeService/RegisterClient",
};

std::unique_ptr< ExchangeService::Stub> ExchangeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ExchangeService::Stub> stub(new ExchangeService::Stub(channel, options));
  return stub;
}

ExchangeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(ExchangeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendResponse_(ExchangeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterClient_(ExchangeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ExchangeService::Stub::SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::exchange::Acknowledge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::exchange::MessageRequest, ::exchange::Acknowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void ExchangeService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::Acknowledge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::exchange::MessageRequest, ::exchange::Acknowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void ExchangeService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::Acknowledge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::exchange::Acknowledge>* ExchangeService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::exchange::Acknowledge, ::exchange::MessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::exchange::Acknowledge>* ExchangeService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExchangeService::Stub::SendResponse(::grpc::ClientContext* context, const ::exchange::MessageResponse& request, ::exchange::Acknowledge* response) {
  return ::grpc::internal::BlockingUnaryCall< ::exchange::MessageResponse, ::exchange::Acknowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendResponse_, context, request, response);
}

void ExchangeService::Stub::async::SendResponse(::grpc::ClientContext* context, const ::exchange::MessageResponse* request, ::exchange::Acknowledge* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::exchange::MessageResponse, ::exchange::Acknowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendResponse_, context, request, response, std::move(f));
}

void ExchangeService::Stub::async::SendResponse(::grpc::ClientContext* context, const ::exchange::MessageResponse* request, ::exchange::Acknowledge* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendResponse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::exchange::Acknowledge>* ExchangeService::Stub::PrepareAsyncSendResponseRaw(::grpc::ClientContext* context, const ::exchange::MessageResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::exchange::Acknowledge, ::exchange::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendResponse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::exchange::Acknowledge>* ExchangeService::Stub::AsyncSendResponseRaw(::grpc::ClientContext* context, const ::exchange::MessageResponse& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendResponseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::exchange::MessageRequest>* ExchangeService::Stub::RegisterClientRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::exchange::MessageRequest>::Create(channel_.get(), rpcmethod_RegisterClient_, context, request);
}

void ExchangeService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest* request, ::grpc::ClientReadReactor< ::exchange::MessageRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::exchange::MessageRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::exchange::MessageRequest>* ExchangeService::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::exchange::MessageRequest>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::exchange::MessageRequest>* ExchangeService::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::exchange::MessageRequest>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, request, false, nullptr);
}

ExchangeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExchangeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExchangeService::Service, ::exchange::MessageRequest, ::exchange::Acknowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExchangeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::exchange::MessageRequest* req,
             ::exchange::Acknowledge* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExchangeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExchangeService::Service, ::exchange::MessageResponse, ::exchange::Acknowledge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExchangeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::exchange::MessageResponse* req,
             ::exchange::Acknowledge* resp) {
               return service->SendResponse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExchangeService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ExchangeService::Service, ::exchange::ClientRegistrationRequest, ::exchange::MessageRequest>(
          [](ExchangeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::exchange::ClientRegistrationRequest* req,
             ::grpc::ServerWriter<::exchange::MessageRequest>* writer) {
               return service->RegisterClient(ctx, req, writer);
             }, this)));
}

ExchangeService::Service::~Service() {
}

::grpc::Status ExchangeService::Service::SendMessage(::grpc::ServerContext* context, const ::exchange::MessageRequest* request, ::exchange::Acknowledge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExchangeService::Service::SendResponse(::grpc::ServerContext* context, const ::exchange::MessageResponse* request, ::exchange::Acknowledge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExchangeService::Service::RegisterClient(::grpc::ServerContext* context, const ::exchange::ClientRegistrationRequest* request, ::grpc::ServerWriter< ::exchange::MessageRequest>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace exchange

