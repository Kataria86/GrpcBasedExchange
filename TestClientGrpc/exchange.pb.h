// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: exchange.proto
// Protobuf C++ Version: 5.29.3

#ifndef exchange_2eproto_2epb_2eh
#define exchange_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_exchange_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_exchange_2eproto;
namespace exchange {
class BroadcastMessageRequest;
struct BroadcastMessageRequestDefaultTypeInternal;
extern BroadcastMessageRequestDefaultTypeInternal _BroadcastMessageRequest_default_instance_;
class ClientRegistrationRequest;
struct ClientRegistrationRequestDefaultTypeInternal;
extern ClientRegistrationRequestDefaultTypeInternal _ClientRegistrationRequest_default_instance_;
class MessageRequest;
struct MessageRequestDefaultTypeInternal;
extern MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
class MessageResponse;
struct MessageResponseDefaultTypeInternal;
extern MessageResponseDefaultTypeInternal _MessageResponse_default_instance_;
class RequestId;
struct RequestIdDefaultTypeInternal;
extern RequestIdDefaultTypeInternal _RequestId_default_instance_;
}  // namespace exchange
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace exchange {

// ===================================================================


// -------------------------------------------------------------------

class RequestId final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:exchange.RequestId) */ {
 public:
  inline RequestId() : RequestId(nullptr) {}
  ~RequestId() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestId* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestId));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestId(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestId(const RequestId& from) : RequestId(nullptr, from) {}
  inline RequestId(RequestId&& from) noexcept
      : RequestId(nullptr, std::move(from)) {}
  inline RequestId& operator=(const RequestId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestId& operator=(RequestId&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestId& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestId* internal_default_instance() {
    return reinterpret_cast<const RequestId*>(
        &_RequestId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RequestId& a, RequestId& b) { a.Swap(&b); }
  inline void Swap(RequestId* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestId* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestId& from) { RequestId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestId* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "exchange.RequestId"; }

 protected:
  explicit RequestId(::google::protobuf::Arena* arena);
  RequestId(::google::protobuf::Arena* arena, const RequestId& from);
  RequestId(::google::protobuf::Arena* arena, RequestId&& from) noexcept
      : RequestId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransactionIdIdFieldNumber = 1,
  };
  // string transactionId_id = 1;
  void clear_transactionid_id() ;
  const std::string& transactionid_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transactionid_id(Arg_&& arg, Args_... args);
  std::string* mutable_transactionid_id();
  PROTOBUF_NODISCARD std::string* release_transactionid_id();
  void set_allocated_transactionid_id(std::string* value);

  private:
  const std::string& _internal_transactionid_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transactionid_id(
      const std::string& value);
  std::string* _internal_mutable_transactionid_id();

  public:
  // @@protoc_insertion_point(class_scope:exchange.RequestId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestId& from_msg);
    ::google::protobuf::internal::ArenaStringPtr transactionid_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2eproto;
};
// -------------------------------------------------------------------

class MessageResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:exchange.MessageResponse) */ {
 public:
  inline MessageResponse() : MessageResponse(nullptr) {}
  ~MessageResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MessageResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MessageResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageResponse(const MessageResponse& from) : MessageResponse(nullptr, from) {}
  inline MessageResponse(MessageResponse&& from) noexcept
      : MessageResponse(nullptr, std::move(from)) {}
  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageResponse& operator=(MessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageResponse* internal_default_instance() {
    return reinterpret_cast<const MessageResponse*>(
        &_MessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(MessageResponse& a, MessageResponse& b) { a.Swap(&b); }
  inline void Swap(MessageResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MessageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageResponse& from) { MessageResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MessageResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "exchange.MessageResponse"; }

 protected:
  explicit MessageResponse(::google::protobuf::Arena* arena);
  MessageResponse(::google::protobuf::Arena* arena, const MessageResponse& from);
  MessageResponse(::google::protobuf::Arena* arena, MessageResponse&& from) noexcept
      : MessageResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReplyFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string reply = 2;
  void clear_reply() ;
  const std::string& reply() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reply(Arg_&& arg, Args_... args);
  std::string* mutable_reply();
  PROTOBUF_NODISCARD std::string* release_reply();
  void set_allocated_reply(std::string* value);

  private:
  const std::string& _internal_reply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply(
      const std::string& value);
  std::string* _internal_mutable_reply();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:exchange.MessageResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reply_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2eproto;
};
// -------------------------------------------------------------------

class MessageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:exchange.MessageRequest) */ {
 public:
  inline MessageRequest() : MessageRequest(nullptr) {}
  ~MessageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MessageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MessageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageRequest(const MessageRequest& from) : MessageRequest(nullptr, from) {}
  inline MessageRequest(MessageRequest&& from) noexcept
      : MessageRequest(nullptr, std::move(from)) {}
  inline MessageRequest& operator=(const MessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRequest& operator=(MessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageRequest* internal_default_instance() {
    return reinterpret_cast<const MessageRequest*>(
        &_MessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MessageRequest& a, MessageRequest& b) { a.Swap(&b); }
  inline void Swap(MessageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageRequest& from) { MessageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MessageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "exchange.MessageRequest"; }

 protected:
  explicit MessageRequest(::google::protobuf::Arena* arena);
  MessageRequest(::google::protobuf::Arena* arena, const MessageRequest& from);
  MessageRequest(::google::protobuf::Arena* arena, MessageRequest&& from) noexcept
      : MessageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTransactionIdFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kSenderFieldNumber = 4,
    kReceiversFieldNumber = 5,
    kMessagePayloadFieldNumber = 6,
    kWaitingForResponseFieldNumber = 3,
  };
  // string transaction_id = 1;
  void clear_transaction_id() ;
  const std::string& transaction_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transaction_id(Arg_&& arg, Args_... args);
  std::string* mutable_transaction_id();
  PROTOBUF_NODISCARD std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* value);

  private:
  const std::string& _internal_transaction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_id(
      const std::string& value);
  std::string* _internal_mutable_transaction_id();

  public:
  // string message_id = 2;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string sender = 4;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string receivers = 5;
  void clear_receivers() ;
  const std::string& receivers() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receivers(Arg_&& arg, Args_... args);
  std::string* mutable_receivers();
  PROTOBUF_NODISCARD std::string* release_receivers();
  void set_allocated_receivers(std::string* value);

  private:
  const std::string& _internal_receivers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receivers(
      const std::string& value);
  std::string* _internal_mutable_receivers();

  public:
  // string message_payload = 6;
  void clear_message_payload() ;
  const std::string& message_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_payload(Arg_&& arg, Args_... args);
  std::string* mutable_message_payload();
  PROTOBUF_NODISCARD std::string* release_message_payload();
  void set_allocated_message_payload(std::string* value);

  private:
  const std::string& _internal_message_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_payload(
      const std::string& value);
  std::string* _internal_mutable_message_payload();

  public:
  // bool waiting_for_response = 3;
  void clear_waiting_for_response() ;
  bool waiting_for_response() const;
  void set_waiting_for_response(bool value);

  private:
  bool _internal_waiting_for_response() const;
  void _internal_set_waiting_for_response(bool value);

  public:
  // @@protoc_insertion_point(class_scope:exchange.MessageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      86, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr transaction_id_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::ArenaStringPtr receivers_;
    ::google::protobuf::internal::ArenaStringPtr message_payload_;
    bool waiting_for_response_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2eproto;
};
// -------------------------------------------------------------------

class ClientRegistrationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:exchange.ClientRegistrationRequest) */ {
 public:
  inline ClientRegistrationRequest() : ClientRegistrationRequest(nullptr) {}
  ~ClientRegistrationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientRegistrationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientRegistrationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientRegistrationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientRegistrationRequest(const ClientRegistrationRequest& from) : ClientRegistrationRequest(nullptr, from) {}
  inline ClientRegistrationRequest(ClientRegistrationRequest&& from) noexcept
      : ClientRegistrationRequest(nullptr, std::move(from)) {}
  inline ClientRegistrationRequest& operator=(const ClientRegistrationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRegistrationRequest& operator=(ClientRegistrationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRegistrationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRegistrationRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRegistrationRequest*>(
        &_ClientRegistrationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ClientRegistrationRequest& a, ClientRegistrationRequest& b) { a.Swap(&b); }
  inline void Swap(ClientRegistrationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRegistrationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRegistrationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientRegistrationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientRegistrationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientRegistrationRequest& from) { ClientRegistrationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientRegistrationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "exchange.ClientRegistrationRequest"; }

 protected:
  explicit ClientRegistrationRequest(::google::protobuf::Arena* arena);
  ClientRegistrationRequest(::google::protobuf::Arena* arena, const ClientRegistrationRequest& from);
  ClientRegistrationRequest(::google::protobuf::Arena* arena, ClientRegistrationRequest&& from) noexcept
      : ClientRegistrationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // @@protoc_insertion_point(class_scope:exchange.ClientRegistrationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientRegistrationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2eproto;
};
// -------------------------------------------------------------------

class BroadcastMessageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:exchange.BroadcastMessageRequest) */ {
 public:
  inline BroadcastMessageRequest() : BroadcastMessageRequest(nullptr) {}
  ~BroadcastMessageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BroadcastMessageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BroadcastMessageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BroadcastMessageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline BroadcastMessageRequest(const BroadcastMessageRequest& from) : BroadcastMessageRequest(nullptr, from) {}
  inline BroadcastMessageRequest(BroadcastMessageRequest&& from) noexcept
      : BroadcastMessageRequest(nullptr, std::move(from)) {}
  inline BroadcastMessageRequest& operator=(const BroadcastMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastMessageRequest& operator=(BroadcastMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastMessageRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastMessageRequest*>(
        &_BroadcastMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BroadcastMessageRequest& a, BroadcastMessageRequest& b) { a.Swap(&b); }
  inline void Swap(BroadcastMessageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BroadcastMessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BroadcastMessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BroadcastMessageRequest& from) { BroadcastMessageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BroadcastMessageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "exchange.BroadcastMessageRequest"; }

 protected:
  explicit BroadcastMessageRequest(::google::protobuf::Arena* arena);
  BroadcastMessageRequest(::google::protobuf::Arena* arena, const BroadcastMessageRequest& from);
  BroadcastMessageRequest(::google::protobuf::Arena* arena, BroadcastMessageRequest&& from) noexcept
      : BroadcastMessageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kSenderFieldNumber = 2,
    kMessagePayloadFieldNumber = 6,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string sender = 2;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string message_payload = 6;
  void clear_message_payload() ;
  const std::string& message_payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_payload(Arg_&& arg, Args_... args);
  std::string* mutable_message_payload();
  PROTOBUF_NODISCARD std::string* release_message_payload();
  void set_allocated_message_payload(std::string* value);

  private:
  const std::string& _internal_message_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_payload(
      const std::string& value);
  std::string* _internal_mutable_message_payload();

  public:
  // @@protoc_insertion_point(class_scope:exchange.BroadcastMessageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BroadcastMessageRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::ArenaStringPtr message_payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestId

// string transactionId_id = 1;
inline void RequestId::clear_transactionid_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactionid_id_.ClearToEmpty();
}
inline const std::string& RequestId::transactionid_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.RequestId.transactionId_id)
  return _internal_transactionid_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestId::set_transactionid_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactionid_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.RequestId.transactionId_id)
}
inline std::string* RequestId::mutable_transactionid_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transactionid_id();
  // @@protoc_insertion_point(field_mutable:exchange.RequestId.transactionId_id)
  return _s;
}
inline const std::string& RequestId::_internal_transactionid_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transactionid_id_.Get();
}
inline void RequestId::_internal_set_transactionid_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactionid_id_.Set(value, GetArena());
}
inline std::string* RequestId::_internal_mutable_transactionid_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transactionid_id_.Mutable( GetArena());
}
inline std::string* RequestId::release_transactionid_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.RequestId.transactionId_id)
  return _impl_.transactionid_id_.Release();
}
inline void RequestId::set_allocated_transactionid_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transactionid_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transactionid_id_.IsDefault()) {
    _impl_.transactionid_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.RequestId.transactionId_id)
}

// -------------------------------------------------------------------

// BroadcastMessageRequest

// string message_id = 1;
inline void BroadcastMessageRequest::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& BroadcastMessageRequest::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.BroadcastMessageRequest.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastMessageRequest::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.BroadcastMessageRequest.message_id)
}
inline std::string* BroadcastMessageRequest::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:exchange.BroadcastMessageRequest.message_id)
  return _s;
}
inline const std::string& BroadcastMessageRequest::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void BroadcastMessageRequest::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* BroadcastMessageRequest::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* BroadcastMessageRequest::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.BroadcastMessageRequest.message_id)
  return _impl_.message_id_.Release();
}
inline void BroadcastMessageRequest::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.BroadcastMessageRequest.message_id)
}

// string sender = 2;
inline void BroadcastMessageRequest::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& BroadcastMessageRequest::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.BroadcastMessageRequest.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastMessageRequest::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.BroadcastMessageRequest.sender)
}
inline std::string* BroadcastMessageRequest::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:exchange.BroadcastMessageRequest.sender)
  return _s;
}
inline const std::string& BroadcastMessageRequest::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void BroadcastMessageRequest::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* BroadcastMessageRequest::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* BroadcastMessageRequest::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.BroadcastMessageRequest.sender)
  return _impl_.sender_.Release();
}
inline void BroadcastMessageRequest::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.BroadcastMessageRequest.sender)
}

// string message_payload = 6;
inline void BroadcastMessageRequest::clear_message_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.ClearToEmpty();
}
inline const std::string& BroadcastMessageRequest::message_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.BroadcastMessageRequest.message_payload)
  return _internal_message_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastMessageRequest::set_message_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.BroadcastMessageRequest.message_payload)
}
inline std::string* BroadcastMessageRequest::mutable_message_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_payload();
  // @@protoc_insertion_point(field_mutable:exchange.BroadcastMessageRequest.message_payload)
  return _s;
}
inline const std::string& BroadcastMessageRequest::_internal_message_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_payload_.Get();
}
inline void BroadcastMessageRequest::_internal_set_message_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.Set(value, GetArena());
}
inline std::string* BroadcastMessageRequest::_internal_mutable_message_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_payload_.Mutable( GetArena());
}
inline std::string* BroadcastMessageRequest::release_message_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.BroadcastMessageRequest.message_payload)
  return _impl_.message_payload_.Release();
}
inline void BroadcastMessageRequest::set_allocated_message_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_payload_.IsDefault()) {
    _impl_.message_payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.BroadcastMessageRequest.message_payload)
}

// -------------------------------------------------------------------

// MessageRequest

// string transaction_id = 1;
inline void MessageRequest::clear_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.ClearToEmpty();
}
inline const std::string& MessageRequest::transaction_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.MessageRequest.transaction_id)
  return _internal_transaction_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageRequest::set_transaction_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.MessageRequest.transaction_id)
}
inline std::string* MessageRequest::mutable_transaction_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transaction_id();
  // @@protoc_insertion_point(field_mutable:exchange.MessageRequest.transaction_id)
  return _s;
}
inline const std::string& MessageRequest::_internal_transaction_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transaction_id_.Get();
}
inline void MessageRequest::_internal_set_transaction_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.Set(value, GetArena());
}
inline std::string* MessageRequest::_internal_mutable_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.transaction_id_.Mutable( GetArena());
}
inline std::string* MessageRequest::release_transaction_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.MessageRequest.transaction_id)
  return _impl_.transaction_id_.Release();
}
inline void MessageRequest::set_allocated_transaction_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transaction_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transaction_id_.IsDefault()) {
    _impl_.transaction_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.MessageRequest.transaction_id)
}

// string message_id = 2;
inline void MessageRequest::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& MessageRequest::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.MessageRequest.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageRequest::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.MessageRequest.message_id)
}
inline std::string* MessageRequest::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:exchange.MessageRequest.message_id)
  return _s;
}
inline const std::string& MessageRequest::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void MessageRequest::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* MessageRequest::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* MessageRequest::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.MessageRequest.message_id)
  return _impl_.message_id_.Release();
}
inline void MessageRequest::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.MessageRequest.message_id)
}

// bool waiting_for_response = 3;
inline void MessageRequest::clear_waiting_for_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waiting_for_response_ = false;
}
inline bool MessageRequest::waiting_for_response() const {
  // @@protoc_insertion_point(field_get:exchange.MessageRequest.waiting_for_response)
  return _internal_waiting_for_response();
}
inline void MessageRequest::set_waiting_for_response(bool value) {
  _internal_set_waiting_for_response(value);
  // @@protoc_insertion_point(field_set:exchange.MessageRequest.waiting_for_response)
}
inline bool MessageRequest::_internal_waiting_for_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.waiting_for_response_;
}
inline void MessageRequest::_internal_set_waiting_for_response(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waiting_for_response_ = value;
}

// string sender = 4;
inline void MessageRequest::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MessageRequest::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.MessageRequest.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageRequest::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.MessageRequest.sender)
}
inline std::string* MessageRequest::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:exchange.MessageRequest.sender)
  return _s;
}
inline const std::string& MessageRequest::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void MessageRequest::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* MessageRequest::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* MessageRequest::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.MessageRequest.sender)
  return _impl_.sender_.Release();
}
inline void MessageRequest::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.MessageRequest.sender)
}

// string receivers = 5;
inline void MessageRequest::clear_receivers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receivers_.ClearToEmpty();
}
inline const std::string& MessageRequest::receivers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.MessageRequest.receivers)
  return _internal_receivers();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageRequest::set_receivers(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receivers_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.MessageRequest.receivers)
}
inline std::string* MessageRequest::mutable_receivers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_receivers();
  // @@protoc_insertion_point(field_mutable:exchange.MessageRequest.receivers)
  return _s;
}
inline const std::string& MessageRequest::_internal_receivers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.receivers_.Get();
}
inline void MessageRequest::_internal_set_receivers(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receivers_.Set(value, GetArena());
}
inline std::string* MessageRequest::_internal_mutable_receivers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.receivers_.Mutable( GetArena());
}
inline std::string* MessageRequest::release_receivers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.MessageRequest.receivers)
  return _impl_.receivers_.Release();
}
inline void MessageRequest::set_allocated_receivers(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.receivers_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.receivers_.IsDefault()) {
    _impl_.receivers_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.MessageRequest.receivers)
}

// string message_payload = 6;
inline void MessageRequest::clear_message_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.ClearToEmpty();
}
inline const std::string& MessageRequest::message_payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.MessageRequest.message_payload)
  return _internal_message_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageRequest::set_message_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.MessageRequest.message_payload)
}
inline std::string* MessageRequest::mutable_message_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_payload();
  // @@protoc_insertion_point(field_mutable:exchange.MessageRequest.message_payload)
  return _s;
}
inline const std::string& MessageRequest::_internal_message_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_payload_.Get();
}
inline void MessageRequest::_internal_set_message_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.Set(value, GetArena());
}
inline std::string* MessageRequest::_internal_mutable_message_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_payload_.Mutable( GetArena());
}
inline std::string* MessageRequest::release_message_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.MessageRequest.message_payload)
  return _impl_.message_payload_.Release();
}
inline void MessageRequest::set_allocated_message_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_payload_.IsDefault()) {
    _impl_.message_payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.MessageRequest.message_payload)
}

// -------------------------------------------------------------------

// ClientRegistrationRequest

// string client_id = 1;
inline void ClientRegistrationRequest::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& ClientRegistrationRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.ClientRegistrationRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRegistrationRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.ClientRegistrationRequest.client_id)
}
inline std::string* ClientRegistrationRequest::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:exchange.ClientRegistrationRequest.client_id)
  return _s;
}
inline const std::string& ClientRegistrationRequest::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_.Get();
}
inline void ClientRegistrationRequest::_internal_set_client_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* ClientRegistrationRequest::_internal_mutable_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* ClientRegistrationRequest::release_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.ClientRegistrationRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void ClientRegistrationRequest::set_allocated_client_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.ClientRegistrationRequest.client_id)
}

// -------------------------------------------------------------------

// MessageResponse

// bool success = 1;
inline void MessageResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool MessageResponse::success() const {
  // @@protoc_insertion_point(field_get:exchange.MessageResponse.success)
  return _internal_success();
}
inline void MessageResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:exchange.MessageResponse.success)
}
inline bool MessageResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void MessageResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string reply = 2;
inline void MessageResponse::clear_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.ClearToEmpty();
}
inline const std::string& MessageResponse::reply() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:exchange.MessageResponse.reply)
  return _internal_reply();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageResponse::set_reply(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:exchange.MessageResponse.reply)
}
inline std::string* MessageResponse::mutable_reply() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reply();
  // @@protoc_insertion_point(field_mutable:exchange.MessageResponse.reply)
  return _s;
}
inline const std::string& MessageResponse::_internal_reply() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reply_.Get();
}
inline void MessageResponse::_internal_set_reply(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.Set(value, GetArena());
}
inline std::string* MessageResponse::_internal_mutable_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reply_.Mutable( GetArena());
}
inline std::string* MessageResponse::release_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:exchange.MessageResponse.reply)
  return _impl_.reply_.Release();
}
inline void MessageResponse::set_allocated_reply(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reply_.IsDefault()) {
    _impl_.reply_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:exchange.MessageResponse.reply)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace exchange


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // exchange_2eproto_2epb_2eh
