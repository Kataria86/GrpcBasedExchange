// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange.proto
#ifndef GRPC_exchange_2eproto__INCLUDED
#define GRPC_exchange_2eproto__INCLUDED

#include "exchange.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace exchange {

// The gRPC service definition
class ExchangeService final {
 public:
  static constexpr char const* service_full_name() {
    return "exchange.ExchangeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::exchange::MessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::exchange::MessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>> AsyncSendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>>(AsyncSendResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>> PrepareAsyncSendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>>(PrepareAsyncSendResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::exchange::MessageRequest>> Register(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::exchange::MessageRequest>>(RegisterRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exchange::MessageRequest>> AsyncRegister(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exchange::MessageRequest>>(AsyncRegisterRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exchange::MessageRequest>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::exchange::MessageRequest>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status WaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::exchange::MessageRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageRequest>> AsyncWaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageRequest>>(AsyncWaitForResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageRequest>> PrepareAsyncWaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageRequest>>(PrepareAsyncWaitForResponseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest* request, ::grpc::ClientReadReactor< ::exchange::MessageRequest>* reactor) = 0;
      virtual void WaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId* request, ::exchange::MessageRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId* request, ::exchange::MessageRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>* AsyncSendResponseRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageResponse>* PrepareAsyncSendResponseRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::exchange::MessageRequest>* RegisterRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::exchange::MessageRequest>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::exchange::MessageRequest>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageRequest>* AsyncWaitForResponseRaw(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::exchange::MessageRequest>* PrepareAsyncWaitForResponseRaw(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::exchange::MessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status SendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::exchange::MessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>> AsyncSendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>>(AsyncSendResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>> PrepareAsyncSendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>>(PrepareAsyncSendResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::exchange::MessageRequest>> Register(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::exchange::MessageRequest>>(RegisterRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::exchange::MessageRequest>> AsyncRegister(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::exchange::MessageRequest>>(AsyncRegisterRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::exchange::MessageRequest>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::exchange::MessageRequest>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status WaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::exchange::MessageRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageRequest>> AsyncWaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageRequest>>(AsyncWaitForResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageRequest>> PrepareAsyncWaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::exchange::MessageRequest>>(PrepareAsyncWaitForResponseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendResponse(::grpc::ClientContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Register(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest* request, ::grpc::ClientReadReactor< ::exchange::MessageRequest>* reactor) override;
      void WaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId* request, ::exchange::MessageRequest* response, std::function<void(::grpc::Status)>) override;
      void WaitForResponse(::grpc::ClientContext* context, const ::exchange::RequestId* request, ::exchange::MessageRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>* AsyncSendResponseRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::exchange::MessageResponse>* PrepareAsyncSendResponseRaw(::grpc::ClientContext* context, const ::exchange::MessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::exchange::MessageRequest>* RegisterRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request) override;
    ::grpc::ClientAsyncReader< ::exchange::MessageRequest>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::exchange::MessageRequest>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::exchange::ClientRegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::exchange::MessageRequest>* AsyncWaitForResponseRaw(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::exchange::MessageRequest>* PrepareAsyncWaitForResponseRaw(::grpc::ClientContext* context, const ::exchange::RequestId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendResponse_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_WaitForResponse_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response);
    virtual ::grpc::Status SendResponse(::grpc::ServerContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response);
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::exchange::ClientRegistrationRequest* request, ::grpc::ServerWriter< ::exchange::MessageRequest>* writer);
    virtual ::grpc::Status WaitForResponse(::grpc::ServerContext* context, const ::exchange::RequestId* request, ::exchange::MessageRequest* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::exchange::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::exchange::MessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendResponse() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendResponse(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendResponse(::grpc::ServerContext* context, ::exchange::MessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::exchange::MessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/, ::grpc::ServerWriter< ::exchange::MessageRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::exchange::ClientRegistrationRequest* request, ::grpc::ServerAsyncWriter< ::exchange::MessageRequest>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WaitForResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WaitForResponse() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_WaitForResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForResponse(::grpc::ServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitForResponse(::grpc::ServerContext* context, ::exchange::RequestId* request, ::grpc::ServerAsyncResponseWriter< ::exchange::MessageRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_SendResponse<WithAsyncMethod_Register<WithAsyncMethod_WaitForResponse<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::exchange::MessageRequest, ::exchange::MessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::exchange::MessageRequest, ::exchange::MessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::exchange::MessageRequest, ::exchange::MessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendResponse() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::exchange::MessageRequest, ::exchange::MessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::exchange::MessageRequest* request, ::exchange::MessageResponse* response) { return this->SendResponse(context, request, response); }));}
    void SetMessageAllocatorFor_SendResponse(
        ::grpc::MessageAllocator< ::exchange::MessageRequest, ::exchange::MessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::exchange::MessageRequest, ::exchange::MessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendResponse(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::exchange::ClientRegistrationRequest, ::exchange::MessageRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::exchange::ClientRegistrationRequest* request) { return this->Register(context, request); }));
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/, ::grpc::ServerWriter< ::exchange::MessageRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::exchange::MessageRequest>* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WaitForResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WaitForResponse() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::exchange::RequestId, ::exchange::MessageRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::exchange::RequestId* request, ::exchange::MessageRequest* response) { return this->WaitForResponse(context, request, response); }));}
    void SetMessageAllocatorFor_WaitForResponse(
        ::grpc::MessageAllocator< ::exchange::RequestId, ::exchange::MessageRequest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::exchange::RequestId, ::exchange::MessageRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WaitForResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForResponse(::grpc::ServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WaitForResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendMessage<WithCallbackMethod_SendResponse<WithCallbackMethod_Register<WithCallbackMethod_WaitForResponse<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendResponse() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendResponse(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/, ::grpc::ServerWriter< ::exchange::MessageRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WaitForResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WaitForResponse() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_WaitForResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForResponse(::grpc::ServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendResponse() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendResponse(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/, ::grpc::ServerWriter< ::exchange::MessageRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WaitForResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WaitForResponse() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_WaitForResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForResponse(::grpc::ServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitForResponse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendResponse() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendResponse(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendResponse(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Register(context, request); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/, ::grpc::ServerWriter< ::exchange::MessageRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WaitForResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WaitForResponse() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WaitForResponse(context, request, response); }));
    }
    ~WithRawCallbackMethod_WaitForResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitForResponse(::grpc::ServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WaitForResponse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::exchange::MessageRequest, ::exchange::MessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::exchange::MessageRequest, ::exchange::MessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::exchange::MessageRequest,::exchange::MessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendResponse() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::exchange::MessageRequest, ::exchange::MessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::exchange::MessageRequest, ::exchange::MessageResponse>* streamer) {
                       return this->StreamedSendResponse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendResponse(::grpc::ServerContext* /*context*/, const ::exchange::MessageRequest* /*request*/, ::exchange::MessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::exchange::MessageRequest,::exchange::MessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WaitForResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WaitForResponse() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::exchange::RequestId, ::exchange::MessageRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::exchange::RequestId, ::exchange::MessageRequest>* streamer) {
                       return this->StreamedWaitForResponse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WaitForResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WaitForResponse(::grpc::ServerContext* /*context*/, const ::exchange::RequestId* /*request*/, ::exchange::MessageRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWaitForResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::exchange::RequestId,::exchange::MessageRequest>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SendResponse<WithStreamedUnaryMethod_WaitForResponse<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::exchange::ClientRegistrationRequest, ::exchange::MessageRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::exchange::ClientRegistrationRequest, ::exchange::MessageRequest>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::exchange::ClientRegistrationRequest* /*request*/, ::grpc::ServerWriter< ::exchange::MessageRequest>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::exchange::ClientRegistrationRequest,::exchange::MessageRequest>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Register<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_SendResponse<WithSplitStreamingMethod_Register<WithStreamedUnaryMethod_WaitForResponse<Service > > > > StreamedService;
};

}  // namespace exchange


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_exchange_2eproto__INCLUDED
